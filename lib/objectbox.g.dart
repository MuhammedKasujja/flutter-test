// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/customer.dart';
import 'models/person_employee.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5499222836845785889),
      name: 'Customer',
      lastPropertyId: const obx_int.IdUid(2, 5701432763564035613),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4266612147602810594),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5701432763564035613),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'orders', srcEntity: 'ShopOrder', srcField: 'customer')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5940882034340663061),
      name: 'ShopOrder',
      lastPropertyId: const obx_int.IdUid(7, 4772117185342915854),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2517729350607898838),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4119941431218935888),
            name: 'price',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 494093968731553212),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 692443777875869298),
            relationTarget: 'Customer'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2205116990077077299),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 9044183196533538146),
            name: 'details',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4772117185342915854),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 368680845116096635),
      name: 'Manager',
      lastPropertyId: const obx_int.IdUid(6, 2799359168729305791),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5606675601421195340),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 272402843322122666),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 457603396052768281),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8793845663310119123),
            name: 'deletedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7962585557658920252),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2799359168729305791),
            name: 'isDeleted',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 368680845116096635),
      lastIndexId: const obx_int.IdUid(1, 692443777875869298),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8371957728593503358],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Customer: obx_int.EntityDefinition<Customer>(
        model: _entities[0],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {
              obx_int.RelInfo<ShopOrder>.toOneBacklink(4, object.id,
                  (ShopOrder srcObject) => srcObject.customer): object.orders
            },
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Customer(id: idParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<Customer>(
              object.orders,
              store,
              obx_int.RelInfo<ShopOrder>.toOneBacklink(
                  4, object.id, (ShopOrder srcObject) => srcObject.customer));
          return object;
        }),
    ShopOrder: obx_int.EntityDefinition<ShopOrder>(
        model: _entities[1],
        toOneRelations: (ShopOrder object) => [object.customer],
        toManyRelations: (ShopOrder object) => {},
        getId: (ShopOrder object) => object.id,
        setId: (ShopOrder object, int id) {
          object.id = id;
        },
        objectToFB: (ShopOrder object, fb.Builder fbb) {
          final detailsOffset =
              object.details == null ? null : fbb.writeString(object.details!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.price);
          fbb.addInt64(3, object.customer.targetId);
          fbb.addFloat64(4, object.amount);
          fbb.addOffset(5, detailsOffset);
          fbb.addInt64(6, object.createdAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final priceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final detailsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ShopOrder(
              id: idParam,
              price: priceParam,
              createdAt: createdAtParam,
              amount: amountParam,
              details: detailsParam);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.customer.attach(store);
          return object;
        }),
    Manager: obx_int.EntityDefinition<Manager>(
        model: _entities[2],
        toOneRelations: (Manager object) => [],
        toManyRelations: (Manager object) => {},
        getId: (Manager object) => object.id,
        setId: (Manager object, int id) {
          object.id = id;
        },
        objectToFB: (Manager object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.deletedAt?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addBool(5, object.isDeleted);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final deletedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final deletedAtParam = deletedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(deletedAtValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final isDeletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = Manager(
              id: idParam,
              name: nameParam,
              createdAt: createdAtParam,
              deletedAt: deletedAtParam,
              updatedAt: updatedAtParam,
              isDeleted: isDeletedParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// See [Customer.id].
  static final id =
      obx.QueryIntegerProperty<Customer>(_entities[0].properties[0]);

  /// See [Customer.name].
  static final name =
      obx.QueryStringProperty<Customer>(_entities[0].properties[1]);

  /// see [Customer.orders]
  static final orders =
      obx.QueryBacklinkToMany<ShopOrder, Customer>(ShopOrder_.customer);
}

/// [ShopOrder] entity fields to define ObjectBox queries.
class ShopOrder_ {
  /// See [ShopOrder.id].
  static final id =
      obx.QueryIntegerProperty<ShopOrder>(_entities[1].properties[0]);

  /// See [ShopOrder.price].
  static final price =
      obx.QueryIntegerProperty<ShopOrder>(_entities[1].properties[1]);

  /// See [ShopOrder.customer].
  static final customer =
      obx.QueryRelationToOne<ShopOrder, Customer>(_entities[1].properties[2]);

  /// See [ShopOrder.amount].
  static final amount =
      obx.QueryDoubleProperty<ShopOrder>(_entities[1].properties[3]);

  /// See [ShopOrder.details].
  static final details =
      obx.QueryStringProperty<ShopOrder>(_entities[1].properties[4]);

  /// See [ShopOrder.createdAt].
  static final createdAt =
      obx.QueryDateProperty<ShopOrder>(_entities[1].properties[5]);
}

/// [Manager] entity fields to define ObjectBox queries.
class Manager_ {
  /// See [Manager.id].
  static final id =
      obx.QueryIntegerProperty<Manager>(_entities[2].properties[0]);

  /// See [Manager.name].
  static final name =
      obx.QueryStringProperty<Manager>(_entities[2].properties[1]);

  /// See [Manager.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Manager>(_entities[2].properties[2]);

  /// See [Manager.deletedAt].
  static final deletedAt =
      obx.QueryDateProperty<Manager>(_entities[2].properties[3]);

  /// See [Manager.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Manager>(_entities[2].properties[4]);

  /// See [Manager.isDeleted].
  static final isDeleted =
      obx.QueryBooleanProperty<Manager>(_entities[2].properties[5]);
}
